import 'dart:async';import 'dart:typed_data';import 'package:agora_rtc_engine/agora_rtc_engine.dart';import 'package:agora_video_voice_call_app/agora_code/videocall_pojo.dart';import 'package:agora_video_voice_call_app/controllers/messageController.dart';import 'package:agora_video_voice_call_app/home_page.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:permission_handler/permission_handler.dart';import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:get/get.dart';import '../agoraRecordingApis/agoraRecordingApis.dart';import '../controllers/individual_chat_controller.dart';import 'constants.dart';class VideoCallScreen extends StatefulWidget {  final String fname;  final String imageUrl;  final String userId;  final bool receivecall;  final String channelId;  final String agoratoken;  final String lname;  VideoCallScreen(      {required this.fname,        required this.imageUrl,        required this.userId,        required this.receivecall,        required this.channelId,        required this.agoratoken,        required this.lname});  @override  _VideoCallScreenState createState() => _VideoCallScreenState();}class _VideoCallScreenState extends State<VideoCallScreen> {  MessageController messageController  = Get.put(MessageController());  ///call duration  late Timer _callDurationTimer;  int _callDurationInSeconds = 0;  late int _streamId;  FirebaseAuth _auth = FirebaseAuth.instance;  String get formattedCallDuration {    // Convert seconds to HH:mm:ss format    int hours = _callDurationInSeconds ~/ 3600;    int minutes = (_callDurationInSeconds % 3600) ~/ 60;    int seconds = _callDurationInSeconds % 60;    String formattedTime = '';    if (hours > 0) {      formattedTime += '$hours:';    }    formattedTime += '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';    return formattedTime;  }  ///Chat services  final TextEditingController _messageController = TextEditingController();  void _sendMessage() async{    if (_messageController.text.isNotEmpty) {      await sendMessage(_messageController.text.trim());      setState(() {        messageController.addMessage("Me: ${_messageController.text}");        _messageController.clear();      });    }  }  late StreamSubscription<QuerySnapshot> callStreamSubscription;  bool isccallstart = false;  bool _isScreenShared = false;  bool _isCalldisconnet = false;  ///jb meeting se sare user left ho jayenge means ab only local user hai  bool _isMuted = false;  bool _isFrontCamera = true; // Indicates if the local user is muted  bool _isCameraOn = true;  Map<int, bool> remoteUserMuteStates = {};  Map<int, bool> remoteUserMuteVideoStates = {};  int uid = 0; // uid of the local user  int? _remoteUid; // uid of the remote user  List<int> _remoteUids = [];  bool _isJoined = false; // Indicates if the local user has joined the channel  late RtcEngine agoraEngine; // Agora engine instance  final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey =  GlobalKey<ScaffoldMessengerState>(); // Global key to access the scaffold  bool isFullScreen = false;  bool myfullscreen = false;  bool remotefullscreen = true;  showMessage(String message) {    scaffoldMessengerKey.currentState?.showSnackBar(SnackBar(      content: Text(message),    ));  }  Future<void> shareScreen() async {    setState(() {      _isScreenShared = !_isScreenShared;    });    if (_isScreenShared) {      await agoraEngine.startScreenCapture(        const ScreenCaptureParameters2(          captureAudio: true,          audioParams: ScreenAudioParameters(            sampleRate: 16000, channels: 2, captureSignalVolume: 100,          ),          captureVideo: true,          videoParams: ScreenVideoParameters(            dimensions: VideoDimensions(width: 1920, height: 1080), // 1080p            frameRate: 30,                       // 30 fps            bitrate: 5000,                                         // 5000 Kbps          ),        ),      );    } else {      await agoraEngine.stopScreenCapture();    }    ChannelMediaOptions options = ChannelMediaOptions(      publishCameraTrack: !_isScreenShared,      publishMicrophoneTrack: !_isScreenShared,      publishScreenTrack: _isScreenShared,      publishScreenCaptureAudio: _isScreenShared,      publishScreenCaptureVideo: _isScreenShared,    );    agoraEngine.updateChannelMediaOptions(options);  }  bool isContainerAInFullPage = true;  var callactiveornotstatus;  var callringingornotstatus = '';  ///this is for draggable view  bool isMyFullScreen = true;  Future<void> ringDuration() async{   Future.delayed(Duration(seconds: 30), ()async{     if(_remoteUid == null){       leave();       Get.off(() => HomePage());     }else{     }   });  }  @override  void initState() {    super.initState();    // Set up an instance of Agora engine    setupVideoSDKEngine();    getCallDetails(widget.userId);    ringDuration();  }// Build UI  @override  Widget build(BuildContext context) {    getCallDetails(widget.userId);    return MaterialApp(      debugShowCheckedModeBanner: false,      scaffoldMessengerKey: scaffoldMessengerKey,      home: Scaffold(        body: Stack(          children: <Widget>[            SizedBox(              width: Get.width,              height: Get.height,              child: _remoteVideo(),            ),            Positioned(                bottom: MediaQuery.of(context).size.width * 0.24,                right: 16,                child: Container(                  width: MediaQuery.of(context).size.width * 0.3,                  height: MediaQuery.of(context).size.width * 0.4,                  padding: const EdgeInsets.all(0.0),                  decoration: BoxDecoration(                    borderRadius: BorderRadius.circular(25.0),                    color: Colors.grey.shade200,                    border: Border.all(color: Colors.grey.shade200)                  ),                  child: _isCameraOn?ClipRRect(                    borderRadius: BorderRadius.circular(25),                      child  : _localPreview()):Icon(Icons.videocam_off, color: Colors.red,),                )),            Align(              alignment: Alignment.topCenter,              child: Center(                child: Container(                  margin: const EdgeInsets.only(top: 60.0),                  child: Column(                    children: <Widget>[                      if (callactiveornotstatus == false)                        const Center(                            child: Text(                              "Calling Disconnect",                              style: TextStyle(color: Colors.black, fontSize: 24.0),                            )),                      if (_callDurationInSeconds > 0)                        const Text(                          "Call Duration",                          style: TextStyle(color: Colors.black, fontSize: 16.0, fontWeight: FontWeight.bold, fontFamily: "Bold"),                        ),                      if (_callDurationInSeconds > 0)                        Text(                          formattedCallDuration,                          style: const TextStyle(color: Colors.black, fontSize: 16.0),                        ),                    ],                  ),                ),              ),            ),            Positioned(              left: 0,              right: 0,              bottom: 0,              child: Container(               decoration: BoxDecoration(                 color: Colors.grey.shade200,                 borderRadius: BorderRadius.only(topLeft: Radius.circular(25), topRight: Radius.circular(25))               ),                child: Padding(                  padding: const EdgeInsets.symmetric(horizontal: 16 ,vertical: 8),                  child: Row(                    mainAxisAlignment: MainAxisAlignment.spaceAround,                    children: [                      const SizedBox(width: 10),                      CircleAvatar(                        backgroundColor: Colors.grey,                        // Set the background color of the CircleAvatar                        radius: 24.0,                        // Set the radius of the CircleAvatar                        child: Center(                          child: IconButton(                            splashColor: Colors.white60,                            iconSize: 20.0,                            padding: const EdgeInsets.all(8.0),                            icon: Icon(                              _isMuted ? Icons.mic_off_rounded : Icons.mic,                              color: Colors.black,                              size: 28.0,                            ),                            // Specify the icon                            onPressed: _isJoined ? () => toggleMute() : null,                          ),                        ),                      ),                      ///camera off on                      CircleAvatar(                        backgroundColor: Colors.grey,                        // Set the background color of the CircleAvatar                        radius: 24.0,                        // Set the radius of the CircleAvatar                        child: Center(                          child: IconButton(                            splashColor: Colors.white60,                            iconSize: 20.0,                            padding: const EdgeInsets.all(8.0),                            icon: Icon(                              //_isCameraOn ? "Turn Off Camera" : "Turn On Camera"                              _isCameraOn ? Icons.videocam : Icons.videocam_off,                              color: Colors.black,                              size: 28.0,                            ),                            // Specify the icon                            ///Arrow function  kar dena                            onPressed: _isJoined ? () {                               toggleCamera();                            } : null,                          ),                        ),                      ),                      ///cut call                      IconButton(                        splashColor: Colors.white,                        iconSize: 36.0,                        padding: const EdgeInsets.all(8.0),                        icon: const Icon(                          Icons.cancel,                          color: Colors.red,                          size: 44.0,                        ),                        // Specify the icon                        onPressed: () {                          leave();                          Get.off(() => HomePage());                        },                      ),                      /// switch camera                      CircleAvatar(                        backgroundColor: Colors.grey,                        // Set the background color of the CircleAvatar                        radius: 24.0,                        // Set the radius of the CircleAvatar                        child: Center(                          child: IconButton(                            splashColor: Colors.white60,                            iconSize: 20.0,                            padding: const EdgeInsets.all(8.0),                            icon: Icon(                              //_isCameraOn ? "Turn Off Camera" : "Turn On Camera"                              _isFrontCamera                                  ? Icons.cameraswitch_rounded                                  : Icons.cameraswitch_outlined,                              color: Colors.black,                              size: 28.0,                            ),                            // Specify the icon                            onPressed:                            _isJoined ? () => toggleCameraRotation() : null,                          ),                        ),                      ),                      /// share screen                      CircleAvatar(                        backgroundColor: Colors.grey,                        // Set the background color of the CircleAvatar                        radius: 24.0,                        // Set the radius of the CircleAvatar                        child: Center(                          child: IconButton(                            splashColor: Colors.white60,                            iconSize: 20.0,                            padding: const EdgeInsets.all(8.0),                            icon: Icon(                              //_isCameraOn ? "Turn Off Camera" : "Turn On Camera"                              _isScreenShared                                  ? Icons.mobile_off_sharp                                  : Icons.mobile_screen_share_sharp,                              color: Colors.black,                              size: 28.0,                            ),                            // Specify the icon                            onPressed: _isJoined ? () => {shareScreen()} : null,                          ),                        ),                      ),                      ///Chat Room                      CircleAvatar(                        backgroundColor: Colors.grey,                        // Set the background color of the CircleAvatar                        radius: 24.0,                        // Set the radius of the CircleAvatar                        child: Center(                          child: IconButton(                            splashColor: Colors.white60,                            iconSize: 20.0,                            padding: const EdgeInsets.all(8.0),                            icon: Icon(                              Icons.edit,                              color: Colors.black,                              size: 28.0,                            ),                            // Specify the icon                            onPressed: () {                              showModalBottomSheet(                                context: context,                                isScrollControlled: true,                                backgroundColor: Colors.transparent,                                builder: (BuildContext context) {                                  return ClipRRect(                                    borderRadius: const BorderRadius.only(                                      topLeft: Radius.circular(25.0),                                      topRight: Radius.circular(25.0),                                    ),                                    child: Container(                                      padding:                                      const EdgeInsets.symmetric(vertical: 16.0),                                      constraints: BoxConstraints(                                          maxHeight:                                          MediaQuery.of(context).size.height * 0.9),                                      decoration: const BoxDecoration(                                        color: Colors.white,                                        borderRadius: BorderRadius.only(                                          topLeft: Radius.circular(25.0),                                          topRight: Radius.circular(25.0),                                        ),                                      ),                                      child: Column(                                      mainAxisAlignment: MainAxisAlignment.center,                                        crossAxisAlignment: CrossAxisAlignment.start,                                        children: <Widget>[                                          SizedBox(width: MediaQuery.of(context).size.width),                                          Padding(                                            padding: const EdgeInsets.symmetric(horizontal: 16.0),                                            child: Column(                                              mainAxisAlignment: MainAxisAlignment.start,                                              crossAxisAlignment: CrossAxisAlignment.start,                                              children: [                                                Padding(                                                  padding: const EdgeInsets.symmetric(horizontal: 4.0),                                                  child: Row(                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                                                    crossAxisAlignment: CrossAxisAlignment.center,                                                    children: [                                                      GestureDetector(                                                        onTap: () {                                                          Navigator.pop(context);                                                        },                                                        child: Row(                                                          mainAxisAlignment: MainAxisAlignment.start,                                                          crossAxisAlignment: CrossAxisAlignment.center,                                                          children: [                                                            Container(                                                                height: 18,                                                                width: 18,                                                                decoration: BoxDecoration(                                                                    shape: BoxShape.circle,                                                                    border:                                                                    Border.all(color: Colors.black, width: 2)),                                                                child: const Center(                                                                    child: Icon(                                                                      Icons.close,                                                                      color: Colors.black,                                                                      size: 14,                                                                    ))),                                                            const SizedBox(                                                              width: 8,                                                            ),                                                            const Text(                                                              "Messages",                                                              style: TextStyle(                                                                  fontSize: 20,                                                                  fontWeight: FontWeight.w800,                                                                  color: Colors.black,                                                                  fontFamily: "Bold"),                                                            ),                                                          ],                                                        ),                                                      ),                                                    ],                                                  ),                                                ),                                                const SizedBox(                                                  height: 16,                                                ),                                              ],                                            ),                                          ),                                          const Divider(                                            color: Color(0xffE5E5E5),                                          ),                                          const SizedBox(                                            height: 16,                                          ),                                          Container(                                            height: MediaQuery.of(context).size.height * 0.69,                                            child:                                                Column(                                                  children: [                                                    ElevatedButton(onPressed: ()async{                                                      String message = await RecordingApis().acquireResourceId(widget.channelId, "855358163");                                                      messageController.addMessage(message);                                                    }, child: Text("Acuire ResourceId"),),                                                    Obx((){                                                      return ListView.builder(                                                        itemCount: messageController.messages.length,                                                        shrinkWrap: true,                                                        itemBuilder: (context, index) {                                                          return ListTile(                                                            title: Text(messageController.messages[index]),                                                          );                                                        },                                                      );                                                    })                                                  ],                                                )                                          ),                                          Padding(                                            padding: const EdgeInsets.symmetric(horizontal: 8.0),                                            child: Row(                                              children: [                                                Expanded(                                                  child: Container(                                                    height: 52,                                                    decoration: BoxDecoration(                                                      color: Colors.grey.shade200,                                                      borderRadius: BorderRadius.circular(26)                                                    ),                                                    child: Padding(                                                      padding: const EdgeInsets.symmetric(horizontal: 16.0),                                                      child: TextFormField(                                                        controller: _messageController,                                                        decoration: InputDecoration(                                                          enabledBorder: InputBorder.none,                                                          focusedBorder: InputBorder.none,                                                          hintText: "Enter your messsage"                                                        ),                                                      ),                                                    ),                                                  ),                                                ),                                                IconButton(onPressed: (){                                                  _sendMessage();                                                }, icon: Icon(Icons.done_all, color: Colors.blue,))                                              ],                                            ),                                          )                                        ],                                      ),                                    ),                                  );                                },                              );                            },                          ),                        ),                      ),                    ],                  ),                ),              ),            )          ],        ),      ),    );  }  Widget _localPreview() {    // Display local video or screen sharing preview    if (_isJoined) {      if (!_isScreenShared) {        return AgoraVideoView(          controller: VideoViewController(            rtcEngine: agoraEngine,            canvas: const VideoCanvas(uid: 0),          ),        );      } else {        if(_isCameraOn){          return AgoraVideoView(              controller: VideoViewController(                rtcEngine: agoraEngine,                canvas: const VideoCanvas(                  cropArea: Rectangle(x: 200, y: 200),                  uid: 0,                  sourceType: VideoSourceType.videoSourceScreen,                ),              ));        }else{          return Icon(Icons.videocam_off, color: Colors.red,);        }      }    } else {      return SizedBox();    }  }  void toggleMute() {    setState(() {      _isMuted = !_isMuted;    });    agoraEngine.muteLocalAudioStream(_isMuted);  }  // Send a chat message  Future<void> sendMessage(String message) async {    Uint8List messageBytes = Uint8List.fromList(message.codeUnits);    int length = messageBytes.length;    await agoraEngine.sendStreamMessage(streamId: _streamId, data: messageBytes, length: length);  }  void toggleCamera() {    setState(() {      _isCameraOn = !_isCameraOn;    });    if (_isCameraOn) {      agoraEngine.enableVideo();    } else {      agoraEngine.disableVideo();    }  }  void toggleCameraRotation() {    setState(() {      _isFrontCamera = !_isFrontCamera;    });    agoraEngine.switchCamera();  }// Display remote user's video  Widget _remoteVideo() {    bool isRemoteUserMuted = remoteUserMuteStates[_remoteUid] ?? false;    bool isRemoteUserVideoMuted = remoteUserMuteVideoStates[_remoteUid] ?? false;    if (_remoteUid != null) {      return GestureDetector(        onTap: () {          setState(() {            isMyFullScreen = !isMyFullScreen;          });        },        child: Stack(          children: [            isRemoteUserVideoMuted?Center(child: Text("No Preview Anurag")):            AgoraVideoView(              controller: VideoViewController.remote(                rtcEngine: agoraEngine,                canvas: VideoCanvas(uid: _remoteUid, mirrorMode: VideoMirrorModeType.videoMirrorModeDisabled,  ),                connection: RtcConnection(channelId: widget.channelId),              ),            ),            if (isRemoteUserMuted)              const Align(                child: Icon(Icons.mic_off, color: Colors.red, size: 24.0),              ),            if (isRemoteUserVideoMuted)              const Positioned(                top: 8,                right: 8,                child: Icon(Icons.videocam_off, color: Colors.red),              ),          ],        ),      );    } else {      return Center(        child: Column(          mainAxisSize: MainAxisSize.min,          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisAlignment: MainAxisAlignment.center,          children: [            SizedBox(              height: 60,            ),            Container(              height: MediaQuery.of(context).size.width * 0.4,              width: MediaQuery.of(context).size.width * 0.4,              decoration: BoxDecoration(                color: Colors.grey.shade200,                shape: BoxShape.circle              ),              child: ClipRRect(                borderRadius: BorderRadius.circular(1000),                ///Replace this this remote users image                child: Image.network("https://plus.unsplash.com/premium_photo-1678197937465-bdbc4ed95815?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D", height: MediaQuery.of(context).size.width * 0.4,                  width: MediaQuery.of(context).size.width * 0.4,fit: BoxFit.cover,),              ),            ),            SizedBox(              height: 16,            ),            Text(widget.fname +" "+ widget.lname, style: TextStyle(              color: Colors.black,              fontSize: 16,              fontFamily: "Bold",              fontWeight: FontWeight.w500            ),),            SizedBox(              height: MediaQuery.of(context).size.height * 0.2,            ),            Text("Calling...", style: TextStyle(                color: Colors.black,                fontSize: 14,                fontFamily: "Bold",            ),),            Expanded(              child: SizedBox(                height: 16,              ),            ),          ],        )      );    }  }  Future<void> setupVideoSDKEngine() async {    try {      // Request necessary permissions      final permissions = await [Permission.microphone, Permission.camera].request();      if (permissions[Permission.microphone] != PermissionStatus.granted ||          permissions[Permission.camera] != PermissionStatus.granted) {        Future.delayed(Duration(seconds: 2), (){          Get.off(HomePage());        });      }      // Create an instance of the Agora engine      agoraEngine = createAgoraRtcEngine();      // Initialize the Agora engine with your app ID and channel profile      await agoraEngine.initialize(const RtcEngineContext(        appId: MyConstants.agoraAppId,        channelProfile: ChannelProfileType.channelProfileCommunication,      ));      // Set the video encoder configuration      await agoraEngine.setVideoEncoderConfiguration(        const VideoEncoderConfiguration(          dimensions: VideoDimensions(width: 1920, height: 1080), // 1080p          frameRate: 30,                       // 30 fps          bitrate: 5000,                                         // 5000 Kbps        ),      );      // Enable audio and video      await agoraEngine.enableAudio();      await agoraEngine.enableVideo();      // Set the channel profile to live broadcasting and the client role to broadcaster      await agoraEngine.setChannelProfile(ChannelProfileType.channelProfileLiveBroadcasting);      await agoraEngine.setClientRole(role: ClientRoleType.clientRoleBroadcaster);      // Start the local video preview      await agoraEngine.startPreview(sourceType: VideoSourceType.videoSourceCamera);      // Register the event handler      agoraEngine.registerEventHandler(        RtcEngineEventHandler(          onJoinChannelSuccess: (RtcConnection connection, int elapsed) {            showMessage("Local user uid:${connection.localUid} joined the channel");            setState(() {              _isJoined = true;            });          },          onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {            showMessage("Remote user uid:$remoteUid joined the channel");            setState(() {              isccallstart = true;              _remoteUid = remoteUid;              _remoteUids.add(remoteUid);              _callDurationTimer = Timer.periodic(const Duration(seconds: 1), (timer) {                setState(() {                  _callDurationInSeconds++;                });              });            });          },          onUserOffline: (RtcConnection connection, int remoteUid, UserOfflineReasonType reason) {            showMessage("Remote user uid:$remoteUid left the channel");            setState(() {              _remoteUid = null;              _remoteUids.remove(remoteUid);              if (_remoteUids.isEmpty) {                _callDurationTimer.cancel();                _isCalldisconnet = false;                _callDurationTimer.cancel();                leave();                Get.off(() => HomePage());              }            });          },          onUserMuteAudio: (RtcConnection connection, int remoteUid, bool muted) {            setState(() {              remoteUserMuteStates[remoteUid] = muted; // True if muted            });          },          onUserMuteVideo: (RtcConnection connection, int remoteUid, bool muted) {            setState(() {              remoteUserMuteVideoStates[remoteUid] = muted; // True if muted            });          },          onVideoSizeChanged: (RtcConnection connection, VideoSourceType sourceType, int uid, int width, int height, int rotation) {            print("SHARING ONNNNNNNN\n\n");            print(sourceType);            print("SHARING ONNNNNNNN\n\n");          },          onRemoteVideoStateChanged: (RtcConnection connection, int remoteUid, RemoteVideoState state, RemoteVideoStateReason reason, int elapsed) {          },          onStreamMessage: (RtcConnection connection, int remoteUid, int streamId, Uint8List data, int length, int sentTs) {            String message = String.fromCharCodes(data);            print("Received message: $message from user: $remoteUid");            showMessage("Received message: $message from user: $remoteUid");            setState(() {              messageController.messages.add("User $remoteUid: $message");            });          },        ),      );      // Join the channel      join();      // Asynchronous operation to create data stream      final streamId = await agoraEngine.createDataStream(DataStreamConfig(ordered: true, syncWithAudio: true));      // Update the state with the result      setState(() {        _streamId = streamId;      });      // Show message after state update      showMessage(_streamId.toString());    } catch (e) {      debugPrint("Error in setupVideoSDKEngine: $e");    }  }  void join() async {    print("AGORA TOKEN  ${widget.channelId}");    print(widget.agoratoken);    await agoraEngine.startPreview();    // Set channel options including the client role and channel profile    ChannelMediaOptions options = const ChannelMediaOptions(      clientRoleType: ClientRoleType.clientRoleBroadcaster,      channelProfile: ChannelProfileType.channelProfileCommunication,    );    await agoraEngine.joinChannel(      token: widget.agoratoken,      channelId: widget.channelId,      options: options,      uid: uid,    );  }  void leave() async {    setState(() {      _isJoined = false;      _remoteUid = null;      _remoteUids.clear();    });    agoraEngine.leaveChannel();    var userlist = [_auth.currentUser!.uid, widget.userId]..sort();    var userJoin = userlist.join('-');    Map<String, dynamic> userData = {      'activecall': false,      'calldisconnectby': _auth.currentUser!.uid    };    // await FBCollections.videocall.doc(userJoin).update(userData);    // var controller = Get.isRegistered<RecentChatController>()    //     ? Get.find<RecentChatController>()    //     : Get.put(RecentChatController());    // controller.getData();    Get.back();  }  // Release the resources when you leave  @override  void dispose() async {    // Cancel the timer to avoid memory leaks    _callDurationTimer.cancel();    // Leave the Agora channel and release resources    await agoraEngine.leaveChannel();    agoraEngine.release();    // Clean up any GetX controllers if applicable    if (Get.isRegistered<IndividualChatController>()) {      Get.delete<IndividualChatController>();    }    // Any other custom resource cleanup    super.dispose();  }  Future<void> getCallDetails(String userId) async {    var chatsCollection = FirebaseFirestore.instance        .collection('Videocall')        .where('commonusers', arrayContains: userId)        .where('activecall', isEqualTo: true);    Stream<QuerySnapshot> chatStream = chatsCollection.snapshots();    chatStream.listen((QuerySnapshot chatQuerySnapshot) {      if (chatQuerySnapshot.docs.isEmpty) {        // No documents found        print("No active calls found");        setState(() {          callactiveornotstatus = false;          callringingornotstatus = "SDF SDF ";          leave();        });      } else {        for (QueryDocumentSnapshot document in chatQuerySnapshot.docs) {          Map<String, dynamic> chatData =          document.data() as Map<String, dynamic>;          VideoCallData videoCallData = VideoCallData.fromMap(chatData);          print("CALL STATUS RUNNING");          print("======= ========" + videoCallData.channelId);          print(videoCallData.receiverfname);          print(videoCallData.senderName);          print("======= ======== ${videoCallData.activeCall}");          print("======= ======== ${videoCallData.callingstatus}");          //          setState(() {            callactiveornotstatus = videoCallData.activeCall;            callringingornotstatus = videoCallData.callingstatus + " check";          });          //_callactiveornotstatus(videoCallData.activeCall);          //_callringingornotstatus(videoCallData.callingstatus);          //update();        }      }    });  }}